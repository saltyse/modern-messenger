import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, filedialog
from PIL import Image, ImageTk, ImageOps, ImageDraw
import json
import hashlib
import os
import base64
import io
from datetime import datetime
import threading
import socket
import cv2
import numpy as np
from tkinter import Frame, Label, Button
import subprocess
import platform
import shutil
import time
import pyaudio
import wave
import tempfile

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
from client import ChatClient

class ModernChatBubble:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞"""
    def __init__(self, parent, message, is_own=False, is_admin=False, avatar_image=None, on_delete=None):
        self.parent = parent
        self.message = message
        self.is_own = is_own
        self.is_admin = is_admin
        self.avatar_image = avatar_image
        self.on_delete = on_delete
        
    def create_widget(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
        main_frame = tk.Frame(self.parent, bg='#FFFFFF')
        main_frame.pack(fill='x', padx=20, pady=2)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        content_frame = tk.Frame(main_frame, bg='#FFFFFF')
        if self.is_own:
            content_frame.pack(side=tk.RIGHT, anchor='e')
        else:
            content_frame.pack(side=tk.LEFT, anchor='w')
        
        # –ê–≤–∞—Ç–∞—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        if not self.is_own:
            avatar_container = tk.Frame(content_frame, bg='#FFFFFF')
            avatar_container.pack(side=tk.LEFT)
            
            if self.avatar_image:
                avatar_label = tk.Label(
                    avatar_container,
                    image=self.avatar_image,
                    bg='#FFFFFF'
                )
                avatar_label.pack()
            else:
                # –ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
                avatar_bg = '#6366F1' if not self.is_admin else '#8B5CF6'
                avatar_canvas = tk.Canvas(avatar_container, width=32, height=32, bg=avatar_bg, highlightthickness=0)
                avatar_canvas.pack()
                initials = self.message['user'][:2].upper() if len(self.message['user']) >= 2 else self.message['user'][0].upper()
                avatar_canvas.create_text(16, 16, text=initials, fill='white', font=('Segoe UI', 10, 'bold'))
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        text_container = tk.Frame(content_frame, bg='#FFFFFF')
        text_container.pack(side=tk.LEFT if self.is_own else tk.RIGHT)
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        if not self.is_own:
            name_frame = tk.Frame(text_container, bg='#FFFFFF')
            name_frame.pack(anchor='w')
            
            name_label = tk.Label(
                name_frame,
                text=self.message['user'],
                font=('Segoe UI', 11, 'bold'),
                fg='#1F2937',
                bg='#FFFFFF'
            )
            name_label.pack(side=tk.LEFT)
            
            if self.is_admin:
                admin_label = tk.Label(
                    name_frame,
                    text=" üëë",
                    font=('Segoe UI', 10),
                    fg='#F59E0B',
                    bg='#FFFFFF'
                )
                admin_label.pack(side=tk.LEFT)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è
        bubble_frame = tk.Frame(text_container, bg='#FFFFFF')
        bubble_frame.pack(fill='x', pady=(2, 0))
        
        # –¶–≤–µ—Ç –ø—É–∑—ã—Ä—è
        if self.is_own:
            bubble_color = '#6366F1'  # –°–∏–Ω–∏–π –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            text_color = '#FFFFFF'
        else:
            bubble_color = '#F3F4F6'  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —á—É–∂–∏—Ö
            text_color = '#1F2937'
        
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if self.message.get('message'):
            message_label = tk.Label(
                bubble_frame,
                text=self.message['message'],
                font=('Segoe UI', 14),
                fg=text_color,
                bg=bubble_color,
                justify='left',
                wraplength=400,
                padx=16,
                pady=12
            )
            message_label.pack(anchor='e' if self.is_own else 'w')
        
        # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if self.message.get('voice'):
            voice_frame = tk.Frame(bubble_frame, bg=bubble_color)
            voice_frame.pack(anchor='e' if self.is_own else 'w', padx=16, pady=8)
            
            voice_btn = tk.Button(
                voice_frame,
                text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                command=lambda: self.play_voice(self.message['voice']),
                font=('Segoe UI', 12),
                fg=text_color,
                bg=bubble_color,
                relief='flat',
                bd=0,
                cursor='hand2',
                padx=12,
                pady=8
            )
            voice_btn.pack()
            voice_btn.bind('<Enter>', lambda e: voice_btn.config(bg='#E5E7EB' if not self.is_own else '#5B58E5'))
            voice_btn.bind('<Leave>', lambda e: voice_btn.config(bg=bubble_color))
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if self.message.get('image'):
            self.create_media_preview(bubble_frame, self.message['image'], 'image', bubble_color)
        
        # –í–∏–¥–µ–æ
        if self.message.get('video'):
            self.create_media_preview(bubble_frame, self.message['video'], 'video', bubble_color)
        
        # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        time_frame = tk.Frame(text_container, bg='#FFFFFF')
        time_frame.pack(fill='x', pady=(4, 0))
        
        try:
            timestamp = datetime.fromisoformat(self.message['timestamp'])
            time_text = timestamp.strftime("%H:%M")
        except:
            time_text = "??:??"
        
        time_label = tk.Label(
            time_frame,
            text=time_text,
            font=('Segoe UI', 10),
            fg='#6B7280',
            bg='#FFFFFF'
        )
        
        if self.is_own:
            time_label.pack(side=tk.RIGHT)
            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if self.on_delete:
                delete_btn = tk.Label(
                    time_frame,
                    text="üóëÔ∏è",
                    font=('Arial', 10),
                    fg='#EF4444',
                    bg='#FFFFFF',
                    cursor='hand2'
                )
                delete_btn.pack(side=tk.RIGHT, padx=(5, 0))
                delete_btn.bind('<Button-1>', lambda e: self.on_delete())
                delete_btn.bind('<Enter>', lambda e: delete_btn.config(fg='#DC2626'))
                delete_btn.bind('<Leave>', lambda e: delete_btn.config(fg='#EF4444'))
        else:
            time_label.pack(side=tk.LEFT)
        
        return main_frame
    
    def create_media_preview(self, parent, filename, media_type, bg_color):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞"""
        try:
            media_frame = tk.Frame(parent, bg=bg_color)
            media_frame.pack(anchor='w', padx=16, pady=(0, 8))
            
            if media_type == 'image':
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ —Å–µ—Ç–∏ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                image_path = filename
                if not os.path.exists(image_path):
                    return
                    
                image = Image.open(image_path)
                image.thumbnail((200, 200), Image.LANCZOS)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ —É–≥–ª—ã
                mask = Image.new('L', image.size, 0)
                mask_draw = ImageDraw.Draw(mask)
                mask_draw.rounded_rectangle([(0, 0), image.size], radius=12, fill=255)
                
                result = Image.new('RGBA', image.size, (0, 0, 0, 0))
                result.paste(image, mask=mask)
                photo = ImageTk.PhotoImage(result)
                
                img_label = tk.Label(media_frame, image=photo, bg=bg_color, cursor='hand2')
                img_label.image = photo
                img_label.pack()
                img_label.bind("<Button-1>", lambda e, path=image_path: self.show_image(path))
            
            elif media_type == 'video':
                video_path = filename
                if not os.path.exists(video_path):
                    return
                    
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ
                cap = cv2.VideoCapture(video_path)
                ret, frame = cap.read()
                if ret:
                    frame = cv2.resize(frame, (200, 150))
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º overlay —Å –∏–∫–æ–Ω–∫–æ–π play
                    pil_img = Image.fromarray(frame_rgb)
                    draw = ImageDraw.Draw(pil_img)
                    
                    # –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —á–µ—Ä–Ω—ã–π overlay
                    overlay = Image.new('RGBA', pil_img.size, (0, 0, 0, 128))
                    pil_img = Image.alpha_composite(pil_img.convert('RGBA'), overlay)
                    
                    # –ò–∫–æ–Ω–∫–∞ play
                    play_size = 40
                    play_x = (200 - play_size) // 2
                    play_y = (150 - play_size) // 2
                    draw.ellipse([play_x, play_y, play_x + play_size, play_y + play_size], 
                               fill='#FFFFFF', outline='#FFFFFF')
                    
                    photo = ImageTk.PhotoImage(pil_img)
                    
                    video_label = tk.Label(media_frame, image=photo, bg=bg_color, cursor='hand2')
                    video_label.image = photo
                    video_label.pack()
                    video_label.bind("<Button-1>", lambda e, path=video_path: self.show_video(path))
                
                cap.release()
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é {media_type}: {e}")
    
    def show_image(self, image_path):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ–ª–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ"""
        try:
            image_window = tk.Toplevel(self.parent)
            image_window.title("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            image_window.geometry("800x600")
            image_window.configure(bg='#FFFFFF')
            
            image = Image.open(image_path)
            image.thumbnail((750, 550), Image.LANCZOS)
            photo = ImageTk.PhotoImage(image)
            
            img_label = tk.Label(image_window, image=photo, bg='#FFFFFF')
            img_label.image = photo
            img_label.pack(padx=20, pady=20)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
    
    def show_video(self, video_path):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ"""
        try:
            system = platform.system()
            if system == "Windows":
                os.startfile(video_path)
            elif system == "Darwin":
                subprocess.run(["open", video_path])
            else:
                subprocess.run(["xdg-open", video_path])
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {str(e)}")
    
    def play_voice(self, voice_filename):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            voice_path = voice_filename
            if os.path.exists(voice_path):
                system = platform.system()
                if system == "Windows":
                    os.startfile(voice_path)
                elif system == "Darwin":
                    subprocess.run(["afplay", voice_path])
                else:
                    subprocess.run(["aplay", voice_path])
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

class ModernSidePanel:
    """–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    def __init__(self, parent, main_app):
        self.parent = parent
        self.main_app = main_app
        self.is_visible = False
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–º–∫—É
        self.side_frame = tk.Frame(parent, bg='#FFFFFF', width=350)
        self.side_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        self.header_frame = tk.Frame(self.side_frame, bg='#FFFFFF')
        self.header_frame.pack(fill=tk.X, pady=(20, 10), padx=20)
        
        self.title_label = tk.Label(
            self.header_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            font=('Segoe UI', 18, 'bold'),
            fg='#1F2937',
            bg='#FFFFFF'
        )
        self.title_label.pack(side=tk.LEFT)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_btn = tk.Label(
            self.header_frame,
            text="‚úï",
            font=('Arial', 16, 'bold'),
            fg='#6B7280',
            bg='#FFFFFF',
            cursor='hand2'
        )
        self.close_btn.pack(side=tk.RIGHT)
        self.close_btn.bind('<Button-1>', lambda e: self.hide())
        self.close_btn.bind('<Enter>', lambda e: self.close_btn.config(fg='#374151'))
        self.close_btn.bind('<Leave>', lambda e: self.close_btn.config(fg='#6B7280'))
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(self.side_frame, bg='#E5E7EB', height=1)
        separator.pack(fill=tk.X, padx=20, pady=10)
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.content_frame = tk.Frame(self.side_frame, bg='#FFFFFF')
        self.content_frame.pack(fill=tk.BOTH, expand=True, padx=20)
        
        self.hide()
    
    def show_admin_panel(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        if not self.is_visible:
            self.show()
        
        self.clear_content_safe()
        self.title_label.config(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å
        canvas = tk.Canvas(self.content_frame, bg='#FFFFFF', highlightthickness=0)
        scrollbar = ttk.Scrollbar(self.content_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#FFFFFF')
        
        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        status_frame = tk.Frame(scrollable_frame, bg='#FFFFFF')
        status_frame.pack(fill='x', pady=12)
        
        status_text = "üü¢ –°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω" if self.main_app.client.connected else "üî¥ –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω"
        tk.Label(
            status_frame,
            text=status_text,
            font=('Segoe UI', 12, 'bold'),
            fg='#059669' if self.main_app.client.connected else '#EF4444',
            bg='#FFFFFF'
        ).pack(anchor='w')
        
        # IP –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if self.main_app.client.connected:
            tk.Label(
                status_frame,
                text=f"IP: {self.main_app.client.host}:{self.main_app.client.port}",
                font=('Segoe UI', 10),
                fg='#6B7280',
                bg='#FFFFFF'
            ).pack(anchor='w', pady=(5, 0))
        
        # –°–µ–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        sections = [
            {
                "title": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
                "content": self.create_stats_section
            },
            {
                "title": "üë• –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", 
                "content": self.create_online_users_section
            },
            {
                "title": "üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã",
                "content": self.create_private_chats_section
            },
            {
                "title": "üí¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏",
                "content": self.create_messages_section
            },
            {
                "title": "üì° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
                "content": self.create_channels_admin_section
            }
        ]
        
        for section in sections:
            section_frame = self.create_section_frame(scrollable_frame, section["title"])
            section["content"](section_frame)
    
    def create_stats_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        stats_frame = tk.Frame(parent, bg='#FFFFFF')
        stats_frame.pack(fill='x', pady=10)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        stats = [
            ("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–ó–∞–≥—Ä—É–∑–∫–∞..."),
            ("üí¨ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è", "–ó–∞–≥—Ä—É–∑–∫–∞..."),
            ("üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", "–ó–∞–≥—Ä—É–∑–∫–∞..."),
            ("üü¢ –û–Ω–ª–∞–π–Ω —Å–µ–π—á–∞—Å", "–ó–∞–≥—Ä—É–∑–∫–∞...")
        ]
        
        for text, value in stats:
            stat_frame = tk.Frame(stats_frame, bg='#FFFFFF')
            stat_frame.pack(fill='x', pady=2)
            
            tk.Label(
                stat_frame,
                text=text,
                font=('Segoe UI', 11),
                fg='#6B7280',
                bg='#FFFFFF',
                anchor='w'
            ).pack(side=tk.LEFT)
            
            tk.Label(
                stat_frame,
                text=str(value),
                font=('Segoe UI', 11, 'bold'),
                fg='#1F2937',
                bg='#FFFFFF',
                anchor='e'
            ).pack(side=tk.RIGHT)
    
    def create_online_users_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.main_app.client.get_users()
        
        users_frame = tk.Frame(parent, bg='#FFFFFF')
        users_frame.pack(fill='x', pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        header_frame = tk.Frame(users_frame, bg='#FFFFFF')
        header_frame.pack(fill='x', pady=(0, 10))
        
        tk.Label(
            header_frame,
            text="–û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            font=('Segoe UI', 12, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(side=tk.LEFT)
        
        refresh_btn = tk.Button(
            header_frame,
            text="üîÑ",
            command=lambda: self.main_app.client.get_users(),
            font=('Segoe UI', 10),
            fg='#6366F1',
            bg='#FFFFFF',
            relief='flat',
            bd=0,
            cursor='hand2'
        )
        refresh_btn.pack(side=tk.RIGHT)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫
    
    def update_online_users(self, users_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        pass
    
    def create_private_chats_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        view_btn = tk.Button(
            parent,
            text="üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã",
            command=self.show_private_messages_admin,
            font=('Segoe UI', 11),
            fg='#6366F1',
            bg='#FFFFFF',
            relief='flat',
            bd=0,
            pady=10,
            cursor='hand2'
        )
        view_btn.pack(fill='x', pady=(8, 0))
        view_btn.bind('<Enter>', lambda e: view_btn.config(bg='#F3F4F6'))
        view_btn.bind('<Leave>', lambda e: view_btn.config(bg='#FFFFFF'))
    
    def create_messages_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        view_btn = tk.Button(
            parent,
            text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            command=self.show_all_messages,
            font=('Segoe UI', 11),
            fg='#6366F1',
            bg='#FFFFFF',
            relief='flat',
            bd=0,
            pady=10,
            cursor='hand2'
        )
        view_btn.pack(fill='x', pady=(8, 0))
        view_btn.bind('<Enter>', lambda e: view_btn.config(bg='#F3F4F6'))
        view_btn.bind('<Leave>', lambda e: view_btn.config(bg='#FFFFFF'))
        
        clear_btn = tk.Button(
            parent,
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            command=self.clear_all_messages,
            font=('Segoe UI', 11),
            fg='#EF4444',
            bg='#FFFFFF',
            relief='flat',
            bd=0,
            pady=10,
            cursor='hand2'
        )
        clear_btn.pack(fill='x', pady=(5, 0))
        clear_btn.bind('<Enter>', lambda e: clear_btn.config(bg='#FEF2F2'))
        clear_btn.bind('<Leave>', lambda e: clear_btn.config(bg='#FFFFFF'))
    
    def create_channels_admin_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        manage_btn = tk.Button(
            parent,
            text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏",
            command=self.show_channels_management,
            font=('Segoe UI', 11),
            fg='#6366F1',
            bg='#FFFFFF',
            relief='flat',
            bd=0,
            pady=10,
            cursor='hand2'
        )
        manage_btn.pack(fill='x', pady=(8, 0))
        manage_btn.bind('<Enter>', lambda e: manage_btn.config(bg='#F3F4F6'))
        manage_btn.bind('<Leave>', lambda e: manage_btn.config(bg='#FFFFFF'))
    
    def create_section_frame(self, parent, title):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞–º–∫—É –¥–ª—è —Å–µ–∫—Ü–∏–∏"""
        section_frame = tk.Frame(parent, bg='#FFFFFF')
        section_frame.pack(fill='x', pady=12)
        
        tk.Label(
            section_frame,
            text=title,
            font=('Segoe UI', 14, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(fill='x', pady=(0, 8))
        
        return section_frame
    
    def show_private_messages_admin(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
        pass
    
    def show_all_messages(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        pass
    
    def show_channels_management(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        self.clear_content_safe()
        self.title_label.config(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        self.main_app.client.get_channels()
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤
        
    def clear_all_messages(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è?"):
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
            pass
    
    def show_user_list(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        if not self.is_visible:
            self.show()
            
        self.clear_content_safe()
        self.title_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.main_app.client.get_users()
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫
    
    def show_channels_list(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.is_visible:
            self.show()
            
        self.clear_content_safe()
        self.title_label.config(text="–ö–∞–Ω–∞–ª—ã")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        self.main_app.client.get_channels()
        
        # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫
    
    def update_channels_list(self, channels_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        pass
    
    def show_create_channel(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        self.clear_content_safe()
        self.title_label.config(text="–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
        
        # –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        form_frame = tk.Frame(self.content_frame, bg='#FFFFFF')
        form_frame.pack(fill='x', pady=10)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        tk.Label(
            form_frame,
            text="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:",
            font=('Segoe UI', 11, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(fill='x', pady=(0, 5))
        
        name_entry = tk.Entry(
            form_frame,
            font=('Segoe UI', 12),
            relief='flat',
            bd=1,
            bg='#F9FAFB'
        )
        name_entry.pack(fill='x', pady=(0, 15))
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        tk.Label(
            form_frame,
            text="–û–ø–∏—Å–∞–Ω–∏–µ:",
            font=('Segoe UI', 11, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(fill='x', pady=(0, 5))
        
        desc_entry = tk.Entry(
            form_frame,
            font=('Segoe UI', 12),
            relief='flat',
            bd=1,
            bg='#F9FAFB'
        )
        desc_entry.pack(fill='x', pady=(0, 15))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
        settings_frame = tk.Frame(form_frame, bg='#FFFFFF')
        settings_frame.pack(fill='x', pady=10)
        
        # –¢–∏–ø –∫–∞–Ω–∞–ª–∞
        type_var = tk.StringVar(value="public")
        
        tk.Label(
            settings_frame,
            text="–¢–∏–ø –∫–∞–Ω–∞–ª–∞:",
            font=('Segoe UI', 11, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(fill='x', pady=(0, 8))
        
        type_frame = tk.Frame(settings_frame, bg='#FFFFFF')
        type_frame.pack(fill='x', pady=5)
        
        tk.Radiobutton(
            type_frame,
            text="üåê –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª",
            variable=type_var,
            value="public",
            bg='#FFFFFF',
            fg='#374151',
            selectcolor='#6366F1',
            font=('Segoe UI', 11)
        ).pack(side=tk.LEFT, padx=(0, 20))
        
        tk.Radiobutton(
            type_frame,
            text="üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
            variable=type_var,
            value="private",
            bg='#FFFFFF',
            fg='#374151',
            selectcolor='#6366F1',
            font=('Segoe UI', 11)
        ).pack(side=tk.LEFT)
        
        # –ü—Ä–∞–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        write_var = tk.BooleanVar(value=True)
        
        write_frame = tk.Frame(settings_frame, bg='#FFFFFF')
        write_frame.pack(fill='x', pady=10)
        
        write_check = tk.Checkbutton(
            write_frame,
            text="–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–∏—Å–∞—Ç—å –≤ –∫–∞–Ω–∞–ª",
            variable=write_var,
            bg='#FFFFFF',
            fg='#374151',
            selectcolor='#6366F1',
            font=('Segoe UI', 11)
        )
        write_check.pack(anchor='w')
        
        def create_channel():
            name = name_entry.get().strip()
            description = desc_entry.get().strip()
            is_public = type_var.get() == "public"
            subscribers_can_write = write_var.get()
            
            if not name:
                messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞")
                return
            
            self.main_app.client.create_channel(name, description, is_public, subscribers_can_write)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–∞–Ω–∞–ª '{name}' —Å–æ–∑–¥–∞–Ω!")
            self.show_channels_list()
        
        create_btn = tk.Button(
            form_frame,
            text="–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª",
            command=create_channel,
            font=('Segoe UI', 12, 'bold'),
            fg='#FFFFFF',
            bg='#6366F1',
            relief='flat',
            bd=0,
            pady=12,
            cursor='hand2'
        )
        create_btn.pack(fill='x', pady=10)
        create_btn.bind('<Enter>', lambda e: create_btn.config(bg='#5B58E5'))
        create_btn.bind('<Leave>', lambda e: create_btn.config(bg='#6366F1'))
    
    def start_private_chat(self, username):
        self.main_app.start_private_chat_with(username)
        self.hide()
    
    def join_channel(self, channel_id):
        self.main_app.join_channel(channel_id)
        self.hide()
    
    def clear_content_safe(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        try:
            for widget in self.content_frame.winfo_children():
                widget.destroy()
        except tk.TclError:
            pass
    
    def show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å"""
        if not self.is_visible:
            self.side_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=(10, 0))
            self.side_frame.pack_propagate(False)
            self.is_visible = True
    
    def hide(self):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å"""
        if self.is_visible:
            self.side_frame.pack_forget()
            self.is_visible = False

class ModernMessengerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Tandau Messenger")
        self.root.geometry("1200x800")
        self.root.configure(bg='#FFFFFF')
        
        # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
        self.client = ChatClient(host='localhost', port=5555)  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ IP —Å–µ—Ä–≤–µ—Ä–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤
        self.client.on_message_received = self.handle_server_message
        self.client.on_users_updated = self.handle_users_update
        self.client.on_channels_updated = self.handle_channels_update
        self.client.on_connection_status_changed = self.handle_connection_status
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            'primary': '#6366F1',
            'background': '#FFFFFF',
            'sidebar': '#F9FAFB',
            'text_primary': '#1F2937',
            'text_secondary': '#6B7280',
            'border': '#E5E7EB',
            'hover': '#F3F4F6'
        }
        
        self.current_user = None
        self.is_admin = False
        self.avatar_path = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–æ–≤
        self.current_chat_type = "public"
        self.current_private_chat_with = None
        self.current_channel_id = None
        self.current_image_path = None
        self.current_video_path = None
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.is_recording = False
        self.audio_frames = []
        self.audio = pyaudio.PyAudio()
        self.stream = None
        
        # –ö—ç—à –∞–≤–∞—Ç–∞—Ä–æ–∫
        self.avatar_cache = {}
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_connection_screen()
    
    def create_connection_screen(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        for widget in self.root.winfo_children():
            widget.destroy()
        
        main_container = tk.Frame(self.root, bg='#FFFFFF')
        main_container.pack(fill=tk.BOTH, expand=True)
        
        center_frame = tk.Frame(main_container, bg='#FFFFFF')
        center_frame.place(relx=0.5, rely=0.5, anchor='center', width=400)
        
        # –õ–æ–≥–æ—Ç–∏–ø
        logo_frame = tk.Frame(center_frame, bg='#FFFFFF')
        logo_frame.pack(pady=(0, 30))
        
        tk.Label(
            logo_frame,
            text="üí¨",
            font=('Segoe UI', 48),
            fg='#6366F1',
            bg='#FFFFFF'
        ).pack()
        
        tk.Label(
            logo_frame,
            text="Tandau Messenger",
            font=('Segoe UI', 24, 'bold'),
            fg='#1F2937',
            bg='#FFFFFF'
        ).pack()
        
        tk.Label(
            logo_frame,
            text="–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä",
            font=('Segoe UI', 14),
            fg='#6B7280',
            bg='#FFFFFF'
        ).pack(pady=(5, 0))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        settings_frame = tk.Frame(center_frame, bg='#FFFFFF')
        settings_frame.pack(fill='x', pady=20)
        
        tk.Label(
            settings_frame,
            text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            font=('Segoe UI', 16, 'bold'),
            fg='#374151',
            bg='#FFFFFF'
        ).pack(pady=(0, 15))
        
        # –ü–æ–ª–µ IP —Å–µ—Ä–≤–µ—Ä–∞
        tk.Label(
            settings_frame,
            text="IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:",
            font=('Segoe UI', 12, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(fill='x', pady=(0, 5))
        
        self.host_entry = tk.Entry(
            settings_frame,
            font=('Segoe UI', 14),
            relief='flat',
            bd=1,
            bg='#F9FAFB'
        )
        self.host_entry.insert(0, "localhost")
        self.host_entry.pack(fill='x', pady=(0, 15), ipady=8)
        
        # –ü–æ–ª–µ –ø–æ—Ä—Ç–∞
        tk.Label(
            settings_frame,
            text="–ü–æ—Ä—Ç:",
            font=('Segoe UI', 12, 'bold'),
            fg='#374151',
            bg='#FFFFFF',
            anchor='w'
        ).pack(fill='x', pady=(0, 5))
        
        self.port_entry = tk.Entry(
            settings_frame,
            font=('Segoe UI', 14),
            relief='flat',
            bd=1,
            bg='#F9FAFB'
        )
        self.port_entry.insert(0, "5555")
        self.port_entry.pack(fill='x', pady=(0, 25), ipady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_btn = tk.Button(
            settings_frame,
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É",
            command=self.connect_to_server,
            font=('Segoe UI', 14, 'bold'),
            fg='#FFFFFF',
            bg='#6366F1',
            relief='flat',
            bd=0,
            pady=12,
            cursor='hand2'
        )
        connect_btn.pack(fill='x', pady=(0, 15))
        connect_btn.bind('<Enter>', lambda e: connect_btn.config(bg='#5B58E5'))
        connect_btn.bind('<Leave>', lambda e: connect_btn.config(bg='#6366F1'))
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = tk.Label(
            settings_frame,
            text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
            font=('Segoe UI', 12),
            fg='#EF4444',
            bg='#FFFFFF'
        )
        self.connection_status.pack(pady=10)
    
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        host = self.host_entry.get().strip()
        port = int(self.port_entry.get().strip())
        
        self.client.host = host
        self.client.port = port
        
        if self.client.connect():
            self.connection_status.config(text="‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", fg='#059669')
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç–∫—Ä–∞–Ω—É –≤—Ö–æ–¥–∞
            self.create_login_screen()
        else:
            self.connection_status.config(text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", fg='#EF4444')
    
    def handle_connection_status(self, connected):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if connected:
            print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ")
    
    def handle_server_message(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        message_type = message_data.get('type')
        
        if message_type == 'login_response':
            self.root.after(0, lambda: self.handle_login_response(message_data))
        
        elif message_type == 'register_response':
            self.root.after(0, lambda: self.handle_register_response(message_data))
        
        elif message_type == 'new_message':
            self.root.after(0, lambda: self.handle_new_message(message_data))
        
        elif message_type == 'messages_data':
            self.root.after(0, lambda: self.handle_messages_data(message_data))
        
        elif message_type == 'users_list':
            self.root.after(0, lambda: self.handle_users_list(message_data))
        
        elif message_type == 'channels_list':
            self.root.after(0, lambda: self.handle_channels_list(message_data))
    
    def handle_login_response(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤—Ö–æ–¥"""
        if message_data.get('success'):
            self.current_user = message_data.get('user')
            self.is_admin = message_data.get('is_admin', False)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.current_user}!")
            self.create_messenger_screen()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message_data.get('error', '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞'))
    
    def handle_register_response(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
        if message_data.get('success'):
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            self.create_login_screen()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message_data.get('error', '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'))
    
    def handle_new_message(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        if hasattr(self, 'scrollable_frame'):
            self.load_messages()
    
    def handle_messages_data(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        if hasattr(self, 'scrollable_frame'):
            self.display_messages(message_data.get('messages', []))
    
    def handle_users_list(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        if hasattr(self, 'side_panel'):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            pass
    
    def handle_channels_list(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        if hasattr(self, 'side_panel'):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            pass
    
    def handle_users_update(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.root.after(0, lambda: self.update_users_list(message_data))
    
    def handle_channels_update(self, message_data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        self.root.after(0, lambda: self.update_channels_list(message_data))
    
    def update_users_list(self, users_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ UI"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pass
    
    def update_channels_list(self, channels_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤ UI"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        pass
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (create_login_screen, create_register_screen, create_messenger_screen, etc.)
    # –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç self.client –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
    
    def create_login_screen(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç client)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.client.login()
        pass
    
    def create_register_screen(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫—Ä–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç client)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç self.client.register()
        pass
    
    def create_messenger_screen(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)"""
        # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        pass
    
    def send_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç"""
        message_text = self.message_entry.get().strip()
        
        if not message_text and not self.current_image_path and not self.current_video_path:
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
        self.client.send_chat_message(
            chat_type=self.current_chat_type,
            message_text=message_text,
            target=self.current_private_chat_with if self.current_chat_type == 'private' else self.current_channel_id if self.current_chat_type == 'channel' else None
        )
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.message_entry.delete(0, tk.END)
    
    def load_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç"""
        self.client.load_messages(
            chat_type=self.current_chat_type,
            target=self.current_private_chat_with if self.current_chat_type == 'private' else self.current_channel_id if self.current_chat_type == 'channel' else None
        )
    
    def display_messages(self, messages):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for widget in self.scrollable_frame.winfo_children():
            widget.destroy()
        
        if messages:
            for msg in messages[-50:]:
                if not isinstance(msg, dict):
                    continue
                
                is_own = msg.get('user') == self.current_user
                is_admin = msg.get('is_admin', False)
                
                # –°–æ–∑–¥–∞–µ–º –ø—É–∑—ã—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è
                bubble = ModernChatBubble(
                    self.scrollable_frame, 
                    msg, 
                    is_own, 
                    is_admin,
                    on_delete=lambda mid=msg.get('id'): self.delete_message(mid)
                )
                bubble.create_widget()
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ —á–∞—Ç –ø—É—Å—Ç–æ–π
            empty_label = tk.Label(
                self.scrollable_frame,
                text="–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ! üëã",
                font=('Segoe UI', 16),
                fg='#6B7280',
                bg='#FFFFFF',
                pady=50
            )
            empty_label.pack(expand=True)
        
        self.canvas.update_idletasks()
        self.canvas.yview_moveto(1.0)
    
    def delete_message(self, message_id):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç"""
        self.client.delete_message(
            message_id=message_id,
            chat_type=self.current_chat_type,
            target=self.current_private_chat_with if self.current_chat_type == 'private' else self.current_channel_id if self.current_chat_type == 'channel' else None
        )
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = ModernMessengerApp(root)
    root.mainloop()